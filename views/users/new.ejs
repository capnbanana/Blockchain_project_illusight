<!-- views/users/new.ejs -->

<!DOCTYPE html>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/bignumber.js/bignumber.min.js"></script>

<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js'></script>


<html>
    <head>
        <% include ../partials/head %>
    </head>
<body>
    <% include ../partials/nav %>

    <div class="container user user-new">
        <form class="user-form form-horizontal" action="/users" method="post">
            <div class="contentBox">
                <h3 class="contentBoxTop">New User</h3>
                <fieldset>
                <div class="form-group">
                <label for="userId" class="col-sm-3 control-label">ID*</label>
                <div class="col-sm-9">
                    <input class="form-control" type="text" id="userId" name="userId" value="">
                </div>
                </div>
                
                <div class="form-group">
                <label for="password" class="col-sm-3 control-label">Password*</label>
                <div class="col-sm-9">
                <input class="form-control" type="password" id="password" name="password" value="">
                </div>
                </div>
                <div class="form-group">
                <label for="passwordConfirmation" class="col-sm-3 control-label">Password Confirmation*</label>
                <div class="col-sm-9 col-sm-offset-3">
                <input class="form-control" type="password" id="passwordConfirmation" name="passwordConfirmation" value="">
                </div>
                </div>
                <div class="form-group">
                <label for="username" class="col-sm-3 control-label">Name*</label>
            <div class="col-sm-9">
                <input class="form-control" type="text" id="username" name="username" value="">
            </div>
            </div>
            <div class="form-group">
            <label for="email" class="col-sm-3 control-label">Email</label>
            <div class="col-sm-9">
                <input class="form-control" type="text" id="email" name="email" value="">
            </div>
            
            </div>
            <div class="form-group">
            <label for="walletAddr" class="col-sm-3 control-label">Wallet</label>
            <div class="col-sm-9">
                <input class="form-control" type="text" id="walletAddr" name="walletAddr" value="">
            </div>
            
            </div>
                <p>
                <small>*Required</small>
                </p>
                </fieldset>
            </div>

            <div class="buttons">
                <button type="submit" class="btn btn-default">Submit</button>
            </div>
        </form>
    </div> <!-- container end -->
</body>
<script>

const wallet_ContractAddr = '0xf6e49821f8621ae1ad7baad2e580be485598a629';
const wallet_ABI = [{"constant":false,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"},{"name":"value","type":"uint256"},{"name":"receiveType","type":"uint8"}],"name":"onKSCReceived","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"removeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newOwner","type":"address"}],"name":"addOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"destination","type":"address"},{"name":"value","type":"uint256"},{"name":"dataLength","type":"uint256"},{"name":"data","type":"bytes"}],"name":"external_call","outputs":[{"name":"result","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newPrivileged","type":"address"}],"name":"renounceUserOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getOwnerOf","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPrivildgedUser","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initOwners","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_destination","type":"address"},{"indexed":false,"name":"_byteData","type":"bytes"},{"indexed":false,"name":"_dataLength","type":"uint256"},{"indexed":false,"name":"_etherAmount","type":"uint256"},{"indexed":false,"name":"_isSuccess","type":"bool"}],"name":"CallEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"message","type":"string"},{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"receiveType","type":"uint8"}],"name":"LogOnReceiveKSC","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousUser","type":"address"},{"indexed":true,"name":"newUser","type":"address"}],"name":"OwnershipRenounced","type":"event"}];

web3js = new Web3(window.web3.currentProvider);
let newWallet = web3js.eth.contract(wallet_ABI).at(wallet_ContractAddr);

window.addEventListener('load', async() => {
    // Modern dapp browsers
    if (window.ethereum) {
        console.log('window ethereum');
        window.web3 = new Web3(ethereum);
        try {
            //Request account access if needed
            await ethereum.enable();
            // currentAccount = web3js.eth.accounts[0];
            // $('.userAddr span').append(currentAccount);
            await getAccounts();
            await getBalance();
            

            
        } catch (err){
            console.log(err);
        }
    // Legacy dapp browsers
    } else if (window.web3) {
        console.log('window web3')
    // Non-dapp browsers
    } else {
        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }
})
function getAccounts(){
    var loginUserWalletAddr = $('.walletAddr span').text();
    currentAccount = loginUserWalletAddr;
    console.log(currentAccount);
};


function getBalance(){
    web3.eth.getBalance(currentAccount, function(err, result){
        if(err){
            console.log('Cannot check your balance');
        } else {
            // var myEther = window.web3.fromWei(BigNumber(result).toFixed(), 'ether');
            var myEther = web3js.fromWei(BigNumber(result).toFixed(), 'ether');

            console.log(myEther);
            
            $('.userBalance span').append(myEther);
            balance = myEther;
            return balance;
        }
    });
};

</script>






</html>